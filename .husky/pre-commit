#!/bin/bash

# Enable debugging
set -x

echo "Starting pre-commit hook"

# Get the current branch (handle case where HEAD doesn't exist yet)
if git rev-parse --abbrev-ref HEAD 2>/dev/null; then
  BRANCH=$(git rev-parse --abbrev-ref HEAD)
  
  if [ "$BRANCH" != "main" ]; then
    echo "‚õî ERROR: This repository uses mainline development."
    echo "‚ùå Branches are not permitted in this repository."
    echo "‚úÖ Please commit and push directly to main."
    exit 1
  fi
else
  echo "üìù This appears to be the initial commit - proceeding with checks."
  # Assume we're on main for the first commit
  BRANCH="main"
fi

# Check for unstaged changes - only if we have a HEAD reference
if git rev-parse --verify HEAD >/dev/null 2>&1; then
  if git diff --name-only | grep -q .; then
    echo "‚õî ERROR: You have unstaged changes."
    echo "‚ùå All changes must be staged before committing."
    echo "‚úÖ Please use 'git add .' to stage all changes."
    exit 1
  fi
else
  echo "üìù Skipping unstaged changes check for initial commit."
fi

# Check for changes to ESLint configuration files
echo "Checking for ESLint configuration changes"
ESLINT_FILES=$(git diff --cached --name-only --diff-filter=ACMR | grep -E '\.eslintrc\.|eslintrc\.js|eslintrc\.cjs|bypass-lint|eslint-disable|\.eslintignore' || true)

if [ -n "$ESLINT_FILES" ]; then
  echo "‚õî ERROR: Attempting to commit changes to ESLint configuration files."
  echo "‚ùå Modifications to ESLint configuration files are not permitted except for eslint.config.js."
  echo "‚ùå You should NEVER bypass ESLint rules or create files to disable linting."
  echo "‚úÖ Instead, please investigate and fix underlying linting and TypeScript issues systematically."
  echo ""
  echo "Affected files:"
  echo "$ESLINT_FILES"
  echo ""
  echo "RECOMMENDATION: Address code quality issues at their source rather than modifying the linting rules."
  echo "Focus on resolving one issue at a time to maintain high code quality standards."
  exit 1
fi

# Check for eslint-disable comments in changed files - works for initial commit too
ESLINT_DISABLED_FILES=$(git diff --cached -U0 | grep -E '\+.*eslint-disable' || true)
if [ -n "$ESLINT_DISABLED_FILES" ]; then
  echo "‚õî ERROR: Attempting to commit code with eslint-disable comments."
  echo "‚ùå Adding eslint-disable comments is not permitted in this repository."
  echo "‚ùå You should NEVER bypass ESLint rules with disable comments."
  echo "‚úÖ Instead, please fix the underlying linting issues in your code."
  echo ""
  echo "Detected eslint-disable comments:"
  echo "$ESLINT_DISABLED_FILES"
  echo ""
  echo "RECOMMENDATION: Fix the linting issues directly rather than disabling rules."
  exit 1
fi

# Check for eslint configuration in package.json
ESLINT_PKG_CONFIG=$(git diff --cached -U0 package.json | grep -E '\+.*"eslintConfig":' || true)
if [ -n "$ESLINT_PKG_CONFIG" ]; then
  echo "‚õî ERROR: Attempting to add ESLint configuration to package.json."
  echo "‚ùå ESLint configuration in package.json is not permitted."
  echo "‚ùå Only eslint.config.js should be used for ESLint configuration."
  echo "‚úÖ Please modify only the eslint.config.js file for linting configuration."
  exit 1
fi

# Check for changes to Husky files
echo "Checking for Husky configuration changes"
HUSKY_FILES=$(git diff --cached --name-only --diff-filter=ACMR | grep -E '\.husky/' || true)

if [ -n "$HUSKY_FILES" ]; then
  echo "‚õî ERROR: Attempting to commit changes to Husky configuration files."
  echo "‚ùå Modifications to Husky hooks are not permitted."
  echo "‚ùå Git hooks are critical for maintaining code quality standards."
  echo "‚úÖ If you need to modify hooks, please discuss with the repository maintainers."
  echo ""
  echo "Affected files:"
  echo "$HUSKY_FILES"
  echo ""
  echo "RECOMMENDATION: Leave the pre-commit hooks intact to maintain code quality."
  exit 1
fi

# Check for TypeScript bypassing attempts
TS_BYPASS_FILES=$(git diff --cached -U0 | grep -E '\+.*(@ts-ignore|@ts-nocheck|\/\/ @ts-expect-error)' || true)
if [ -n "$TS_BYPASS_FILES" ]; then
  echo "‚õî ERROR: Attempting to commit code that bypasses TypeScript type checking."
  echo "‚ùå Adding @ts-ignore, @ts-nocheck, or @ts-expect-error comments is not permitted."
  echo "‚ùå You should NEVER bypass TypeScript type checking with these comments."
  echo "‚úÖ Instead, please fix the underlying type issues in your code."
  echo ""
  echo "Detected TypeScript bypassing comments:"
  echo "$TS_BYPASS_FILES"
  echo ""
  echo "RECOMMENDATION: Fix the type issues directly rather than bypassing them."
  exit 1
fi

# Check for modifications to tsconfig files that might weaken type checking
TS_CONFIG_WEAKENING=$(git diff --cached -U0 tsconfig*.json | grep -E '\+.*(noImplicitAny|strict|skipLibCheck|allowJs|checkJs).*false' || true)
if [ -n "$TS_CONFIG_WEAKENING" ]; then
  echo "‚õî ERROR: Attempting to weaken TypeScript configuration."
  echo "‚ùå Disabling strict type checking features is not permitted."
  echo "‚ùå You should NEVER weaken TypeScript configuration to avoid fixing type issues."
  echo "‚úÖ Instead, please fix the underlying type issues in your code."
  echo ""
  echo "Detected TypeScript config weakening:"
  echo "$TS_CONFIG_WEAKENING"
  echo ""
  echo "RECOMMENDATION: Maintain strict TypeScript checks and fix type issues properly."
  exit 1
fi

# Check for large files
echo "üîç Checking for large files in commit..."
LARGE_FILES=""
while IFS= read -r FILE_INFO; do
  FILE=$(echo "$FILE_INFO" | cut -f2)
  SIZE=$(echo "$FILE_INFO" | cut -f1)
  
  # Convert size to KB
  SIZE_KB=$(expr $SIZE / 1024)
  
  # Check if it's larger than 100KB
  if [ $SIZE_KB -gt 100 ]; then
    # Skip allowed files
    if ! echo "$FILE" | grep -qE '\.(ico|woff2?|ttf|pdf|svg|gif|jpe?g|png|webp|mp4|webm|avi|mov|mp3|wav|zip|tar|gz|bz2)$'; then
      LARGE_FILES="${LARGE_FILES}\n  - ${FILE} (${SIZE_KB}KB)"
    fi
  fi
done < <(git diff --cached --name-only --diff-filter=ACMRT | xargs -I {} sh -c 'stat -c "%s	{}" "{}" 2>/dev/null || echo "0	{}"')

if [ -n "$LARGE_FILES" ]; then
  echo -e "‚ö†Ô∏è  WARNING: The following files are larger than 100KB:${LARGE_FILES}"
  echo ""
  echo "‚ùó Large files may indicate:"
  echo "   - Binaries that should be stored elsewhere"
  echo "   - Generated files that shouldn't be committed"
  echo "   - Unoptimized assets"
  read -p "‚ñ∂Ô∏è  Do you want to continue with these large files? (y/N) " -n 1 -r </dev/tty
  echo # blank line after response
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "‚úÖ Aborted commit to review large files."
    exit 1
  fi
fi

# Run lint-staged for code quality checks
echo "ü§ñ Running lint-staged for code quality checks..."
if ! npx lint-staged; then
  echo "‚ùå lint-staged checks failed. Please fix the issues above and try again."
  exit 1
fi

# Run the build before committing
echo "üèóÔ∏è  Running build to verify your changes compile correctly..."
if ! npm run build; then
  echo "‚ùå Build failed. Please fix the build errors and try again."
  exit 1
fi

# If we have tests, run them
if [ -f "package.json" ] && grep -q '"test"' package.json; then
  echo "üß™ Running tests..."
  # Skip test check failure for initial setup
  npm test -- --run || echo "‚ö†Ô∏è  Tests failed but continuing..."
else
  echo "üìù No tests found, skipping test check."
fi

echo "‚úÖ All pre-commit checks passed!"