#!/bin/bash

# Ensure commit is on main branch or it's the initial commit

if git rev-parse --abbrev-ref HEAD 2>/dev/null; then
  BRANCH=$(git rev-parse --abbrev-ref HEAD)
  if [ "$BRANCH" != "main" ]; then
    echo "‚õî ERROR: This repository uses mainline development."
    echo "‚ùå Branches are not permitted in this repository."
    echo "‚úÖ Please commit and push directly to main."
    exit 1
  fi
else
  echo "üìù This appears to be the initial commit - proceeding with checks."
fi

# Ensure all changes are staged

if git rev-parse --verify HEAD >/dev/null 2>&1; then
  if git diff --name-only | grep -q .; then
    echo "‚õî ERROR: You have unstaged changes."
    echo "‚ùå All changes must be staged before committing."
    echo "‚úÖ Please use 'git add .' to stage all changes."
    exit 1
  fi
else
  echo "üìù Skipping unstaged changes check for initial commit."
fi

# attempt to detect claude in commit message

# Only try to access commit message if GIT_INDEX_FILE exists
# (avoids false reads from previous commits)
GIT_DIR=$(git rev-parse --git-dir)
COMMIT_EDITMSG="$GIT_DIR/COMMIT_EDITMSG"

if [ -f "$COMMIT_EDITMSG" ]; then
  if grep -i "claude" "$COMMIT_EDITMSG" >/dev/null; then
    echo "üö´ Pre-commit warning: Potential Claude mention detected in early commit message."
    echo "üõë Re-issue the commit without mentioning Claude."
    exit 1
  fi
else
  echo "‚ÑπÔ∏è Skipping early commit message check ‚Äî no COMMIT_EDITMSG available yet."
fi

# Prevent modification of ESLint config files (except eslint.config.js)

ESLINT_FILES=$(git diff --cached --name-only --diff-filter=ACMR | grep -E '\.eslintrc\.|eslintrc\.(js|cjs)|bypass-lint|eslint-disable|\.eslintignore' || true)

if [ -n "$ESLINT_FILES" ]; then
  echo "‚õî ERROR: Attempting to commit changes to ESLint configuration files."
  echo "‚ùå Modifications to ESLint configuration files are not permitted except for eslint.config.js."
  echo ""
  echo "Affected files:"
  echo "$ESLINT_FILES"
  exit 1
fi

ESLINT_DISABLED_FILES=$(git diff --cached -U0 | grep -E '\+.*eslint-disable' || true)

if [ -n "$ESLINT_DISABLED_FILES" ]; then
  echo "‚õî ERROR: eslint-disable comments are not allowed."
  echo ""
  echo "Detected lines:"
  echo "$ESLINT_DISABLED_FILES"
  exit 1
fi

# Block eslintConfig in package.json

ESLINT_PKG_CONFIG=$(git diff --cached -U0 package.json | grep -E '\+.*"eslintConfig":' || true)

if [ -n "$ESLINT_PKG_CONFIG" ]; then
  echo "‚õî ERROR: ESLint config in package.json is not permitted."
  exit 1
fi

# Prevent modification of ESLint config files (except eslint.config.js)

ESLINT_FILES=$(git diff --cached --name-only --diff-filter=ACMR | grep -E '\.eslintrc\.|eslintrc\.(js|cjs)|bypass-lint|eslint-disable|\.eslintignore' || true)

if [ -n "$ESLINT_FILES" ]; then
  echo "‚õî ERROR: Attempting to commit changes to ESLint configuration files."
  echo "‚ùå Modifications to ESLint configuration files are not permitted except for eslint.config.js."
  echo ""
  echo "Affected files:"
  echo "$ESLINT_FILES"
  exit 1
fi

ESLINT_DISABLED_FILES=$(git diff --cached -U0 | grep -E '\+.*eslint-disable' || true)

if [ -n "$ESLINT_DISABLED_FILES" ]; then
  echo "‚õî ERROR: eslint-disable comments are not allowed."
  echo ""
  echo "Detected lines:"
  echo "$ESLINT_DISABLED_FILES"
  exit 1
fi

# Block eslintConfig in package.json

ESLINT_PKG_CONFIG=$(git diff --cached -U0 package.json | grep -E '\+.*"eslintConfig":' || true)

if [ -n "$ESLINT_PKG_CONFIG" ]; then
  echo "‚õî ERROR: ESLint config in package.json is not permitted."
  exit 1
fi

# Block direct modification of Husky hooks

HUSKY_FILES=$(git diff --cached --name-only --diff-filter=ACMR | grep -E '\.husky/' || true)

if [ -n "$HUSKY_FILES" ]; then
  echo "‚õî ERROR: You are trying to modify Husky hooks."
  echo ""
  echo "Affected files:"
  echo "$HUSKY_FILES"
  exit 1
fi

# Prevent usage of TypeScript suppression comments

TS_BYPASS_FILES=$(git diff --cached -U0 | grep -E '\+.*(@ts-ignore|@ts-nocheck|\/\/ @ts-expect-error)' || true)

if [ -n "$TS_BYPASS_FILES" ]; then
  echo "‚õî ERROR: TypeScript bypass directives detected."
  echo ""
  echo "Detected lines:"
  echo "$TS_BYPASS_FILES"
  exit 1
fi

# Block weakening of TypeScript config

TS_CONFIG_WEAKENING=$(git diff --cached -U0 tsconfig*.json | grep -E '\+.*(noImplicitAny|strict|skipLibCheck|allowJs|checkJs).*false' || true)

if [ -n "$TS_CONFIG_WEAKENING" ]; then
  echo "‚õî ERROR: Weakening TypeScript config is not allowed."
  echo ""
  echo "Detected lines:"
  echo "$TS_CONFIG_WEAKENING"
  exit 1
fi

# Run test/lint/typecheck suite

echo "üèÅ Running unified checks via 'npm run check'..."

if ! npm run check; then
  echo ""
  echo "‚ùå Pre-commit checks failed (via 'npm run check')."
  echo ""
  echo "üí° Tip: Claude-generated code often includes non-compliant patterns or bypass comments."
  echo "‚û°Ô∏è  Review any test, type, or lint issues carefully ‚Äî and avoid suppressing them with '@ts-ignore' or 'eslint-disable'."
  echo "üí¨ Feel free to ask for help if you're unsure how to resolve them cleanly."
  exit 1
fi
