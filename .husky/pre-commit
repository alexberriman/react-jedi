#!/bin/bash

# Enable debugging
set -x

echo "Starting pre-commit hook"

# Get the current branch (handle case where HEAD doesn't exist yet)
if git rev-parse --abbrev-ref HEAD 2>/dev/null; then
  BRANCH=$(git rev-parse --abbrev-ref HEAD)

  if [ "$BRANCH" != "main" ]; then
    echo "‚õî ERROR: This repository uses mainline development."
    echo "‚ùå Branches are not permitted in this repository."
    echo "‚úÖ Please commit and push directly to main."
    exit 1
  fi
else
  echo "üìù This appears to be the initial commit - proceeding with checks."
  BRANCH="main"
fi

# Check for unstaged changes - only if we have a HEAD reference
if git rev-parse --verify HEAD >/dev/null 2>&1; then
  if git diff --name-only | grep -q .; then
    echo "‚õî ERROR: You have unstaged changes."
    echo "‚ùå All changes must be staged before committing."
    echo "‚úÖ Please use 'git add .' to stage all changes."
    exit 1
  fi
else
  echo "üìù Skipping unstaged changes check for initial commit."
fi

# Early commit message check
echo "üîç Checking commit message early..."

COMMIT_MSG_FILE="$(git rev-parse --git-path COMMIT_EDITMSG)"

if [ -f "$COMMIT_MSG_FILE" ]; then
  COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

  if echo "$COMMIT_MSG" | grep -Ei "claude|Co-Authored-By:.*claude|Generated with \[Claude Code\]" >/dev/null; then
    echo "üö´ Commit rejected: Please avoid mentioning Claude in commit messages."
    echo "‚ùå Remove AI co-author tags or generated comments from commit messages."
    echo "‚úÖ Use messages that describe WHAT changed and WHY."
    exit 1
  fi
fi

# Check for ESLint config changes
echo "Checking for ESLint configuration changes"
ESLINT_FILES=$(git diff --cached --name-only --diff-filter=ACMR | grep -E '\.eslintrc\.|eslintrc\.js|eslintrc\.cjs|bypass-lint|eslint-disable|\.eslintignore' || true)

if [ -n "$ESLINT_FILES" ]; then
  echo "‚õî ERROR: Attempting to commit changes to ESLint configuration files."
  echo "‚ùå Modifications to ESLint configuration files are not permitted except for eslint.config.js."
  echo ""
  echo "Affected files:"
  echo "$ESLINT_FILES"
  exit 1
fi

# Check for eslint-disable comments
ESLINT_DISABLED_FILES=$(git diff --cached -U0 | grep -E '\+.*eslint-disable' || true)
if [ -n "$ESLINT_DISABLED_FILES" ]; then
  echo "‚õî ERROR: eslint-disable comments are not allowed."
  echo ""
  echo "Detected lines:"
  echo "$ESLINT_DISABLED_FILES"
  exit 1
fi

# Check for eslintConfig in package.json
ESLINT_PKG_CONFIG=$(git diff --cached -U0 package.json | grep -E '\+.*"eslintConfig":' || true)
if [ -n "$ESLINT_PKG_CONFIG" ]; then
  echo "‚õî ERROR: ESLint config in package.json is not permitted."
  exit 1
fi

# Check for changes to .husky/
echo "Checking for Husky configuration changes"
HUSKY_FILES=$(git diff --cached --name-only --diff-filter=ACMR | grep -E '\.husky/' || true)

if [ -n "$HUSKY_FILES" ]; then
  echo "‚õî ERROR: You are trying to modify Husky hooks."
  echo ""
  echo "Affected files:"
  echo "$HUSKY_FILES"
  exit 1
fi

# Check for TypeScript bypass
TS_BYPASS_FILES=$(git diff --cached -U0 | grep -E '\+.*(@ts-ignore|@ts-nocheck|\/\/ @ts-expect-error)' || true)
if [ -n "$TS_BYPASS_FILES" ]; then
  echo "‚õî ERROR: TypeScript bypass directives detected."
  echo ""
  echo "Detected lines:"
  echo "$TS_BYPASS_FILES"
  exit 1
fi

# Check for weakened tsconfig
TS_CONFIG_WEAKENING=$(git diff --cached -U0 tsconfig*.json | grep -E '\+.*(noImplicitAny|strict|skipLibCheck|allowJs|checkJs).*false' || true)
if [ -n "$TS_CONFIG_WEAKENING" ]; then
  echo "‚õî ERROR: Weakening TypeScript config is not allowed."
  echo ""
  echo "Detected lines:"
  echo "$TS_CONFIG_WEAKENING"
  exit 1
fi

# Run unified check (lint, typecheck, test)
echo "üèÅ Running unified checks via 'npm run check'..."

if ! npm run check; then
  echo ""
  echo "‚ùå Pre-commit checks failed (via 'npm run check')."
  echo ""
  echo "üí° Tip: Claude-generated code often includes non-compliant patterns or bypass comments."
  echo "‚û°Ô∏è  Review any test, type, or lint issues carefully ‚Äî and avoid suppressing them with '@ts-ignore' or 'eslint-disable'."
  echo "üí¨ Feel free to ask for help if you're unsure how to resolve them cleanly."
  exit 1
fi

echo "‚úÖ All pre-commit checks passed!"
