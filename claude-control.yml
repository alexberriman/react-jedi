name: React Jedi
description: A Server-Driven UI (SDUI) library for rapidly building beautiful React interfaces using JSON specifications.

# Project type
project_type: "react"

# Project brief/documentation
project:
  brief_file: ABOUT.md
  vision: "Creating a powerful SDUI library for rapidly building beautiful websites with JSON specifications"
  key_goals:
    - "Enable rapid development of visually stunning websites through JSON-defined UIs"
    - "Provide seamless integration with @shadcn/ui components and TailwindCSS"
    - "Create a type-safe, schema-validated specification system for defining UIs"
    - "Deliver exceptional developer experience with clear APIs and documentation"
    - "Build an extensible architecture supporting custom components and theming"
  design_principles: "Clean, functional, type-safe code with JSON-driven rendering, extensive shadcn integration, and beautiful visual aesthetics."

# Claude interaction settings
claude:
  # Enable mainline development (commit directly to main)
  main_only: true

  # Exit when completion code found
  exit_on_complete: false

  # Default settings
  confirmation_wait_time: 5
  idle_threshold: 2
  skip_git_checks: true

# Enable Claude.md file generation
claude_md:
  enabled: true
  skip_tech_guidelines: true

  # Explicitly define project category
  project_category: "frontend"

  # Code style conventions for Claude.md
  code_style:
    case_style: "kebab-case"
    indentation: "spaces"
    indent_size: 2
    quote_style: "double"
    max_line_length: 100
    trailing_comma: true
    semicolons: true
    component_structure: "directory"
    test_pattern: "{name}.test.ts"

  # Preferred technologies
  preferred_technologies:
    frontend:
      framework: "react"
      language: "typescript"
      styling: "tailwind"
      error_handling: "ts-results"
      ui_library: "@shadcn/ui"
      component_lib: true
      storybook: true
      # Define architecture patterns
      patterns:
        functional_approach: true
        small_pure_functions: true
        feature_based_modules: true
        barrel_files: true
        component_per_directory: true
    testing:
      unit: "vitest"
      unit_version: "3.1.3"
      location: "adjacent"
      component: "storybook"
    build:
      bundler: "vite"

  # Custom additional sections for CLAUDE.md
  additional_sections:
    - title: "Server-Driven UI Architecture"
      content: |
        This library implements Server-Driven UI (SDUI) architecture with these key principles:

        - **JSON-Driven**: All UI components and their relationships are defined in JSON
        - **Specification Schema**: Strongly typed schemas validate all UI specifications
        - **Component Resolution**: Dynamic mapping of specification types to React components
        - **Theme Inheritance**: Cascading theme properties flow through component hierarchies
        - **State Management**: Local and global state defined declaratively in specifications
        - **Expression Parsing**: Simple expression language for dynamic rendering conditions
        - **Event Binding**: JSON-defined event handlers mapped to component callbacks

    - title: "Functional Programming Principles"
      content: |
        This project follows functional programming principles:

        - **Immutable data**: Avoid mutating data structures
        - **Pure functions**: Functions should have no side effects
        - **Function composition**: Build complex logic from simple functions
        - **Result type**: Use Result<T, E> to handle success/failure
        - **Early returns**: Use early returns to avoid nested conditionals
        - **Small modules**: Create small, focused modules with a single responsibility

    - title: "Component Structure"
      content: |
        Each component should be in its own directory with the following files:

        - `index.ts`: Barrel file exporting the component
        - `component-name.tsx`: The actual component implementation
        - `component-name.stories.tsx`: Storybook stories for the component

        Example component structure:
        ```
        src/
          components/           # All UI components
            ui/                 # @shadcn/ui components
              button/
              card/
              input/
            feature-a/         # Feature-specific components
              cool-widget/
                index.ts
                cool-widget.tsx
                cool-widget.stories.tsx
          hooks/               # Custom React hooks
          utils/               # Shared utilities
          types/               # TypeScript type definitions
          themes/              # Theme configurations
        ```

    - title: "UI Design Principles"
      content: |
        When designing and building UI components:

        - Make it ðŸ”¥, sexy as fuck and beautiful for 2025
        - Implement modern, visually stunning interfaces that push design boundaries
        - Use bold, vibrant color schemes with thoughtful contrast and accessibility
        - Incorporate subtle animations and micro-interactions that feel natural and responsive
        - Ensure stunning visual aesthetics never compromise usability or performance
        - Design for dark mode first with proper color contrast
        - Embrace minimalism while maintaining visual interest and hierarchy
        - Use variable fonts, generous whitespace, and thoughtful typography
        - Prioritize responsive, fluid designs that work on all screen sizes

  # Permissions for Claude
  allow_permissions:
    enabled: true
    allow_read: ["**/*"]
    allow_write: ["**/*"]
    allow_executions: ["npm", "yarn", "pnpm", "npx"]

# Commands to execute when Claude is idle
commands:
  lint: npm run lint
  typecheck: npm run typecheck
  test: npm run test
  build-example: npm run example-app:build

# Command execution sequence
command_sequence: ["lint", "typecheck", "test"]

# Define quality standards to enforce
quality_standards:
  # Required dev dependencies
  required_devDependencies:
    - "eslint"
    - "prettier"
    - "typescript"
    - "vitest"
    - "@typescript-eslint/eslint-plugin"
    - "@typescript-eslint/parser"
    - "eslint-config-prettier"
    - "eslint-plugin-unicorn"
    - "eslint-plugin-react"
    - "eslint-plugin-react-hooks"
    - "eslint-plugin-jsx-a11y"
    - "husky"
    - "lint-staged"
    - "@storybook/react"
    - "tailwindcss"
    - "tsup"
    - "@types/react"
    - "@types/react-dom"

  # Configuration files that must exist
  required_config_files:
    - "eslint.config.js"
    - "tsconfig.json"
    - "vitest.config.ts"
    - "tailwind.config.js"
    - ".storybook/main.js"
    - ".husky/pre-commit"

# Custom prompts
prompts:
  # Updated prompt for Claude when errors occur
  error_fix: |
    Please fix issues and warnings that occurred when running `{command}`.
    Important guidelines:

    1. Do NOT use `eslint-disable`, `ts-ignore`, or any other suppression comments
    2. Do NOT use the `any` type in TypeScript - always use proper type definitions
    3. Fix the root causes of each issue correctly and cleanly
    4. Ensure your changes follow the existing code style and patterns

    Remember these key principles:
    1. Use `ts-results` for error handling (prefer `Result<T, E>` over try/catch)
    2. Create small, pure functions with a single responsibility
    3. Use strong TypeScript typing - no any, unknown, or missing types
    4. Follow kebab-case for file names and maintain proper component directory structure
    5. For React components, use functional components with proper typing
    6. For asynchronous code, use async/await instead of .then() chains

    Focus on creating high-quality, well-typed React components that address the underlying issues.

    If you can't fix all issues, pick the most critical ones first, think deeply about proper solutions, and implement them correctly. Never bypass eslint or typescript rules.

  # Prompt sent for todo list guidance
  todo_prompt: |
    Please follow these steps for each task:

    1. First, check `./TODO.md` and review all tasks
    2. Update TODO.md to mark completed tasks (use âœ… or [DONE] prefix)
    3. Select ONLY ONE next incomplete task to work on. Stay on main branch.
    4. Think very deeply about this ONE task before implementing
    5. Break the task into smaller, logical steps
    6. Focus on implementing ONE step at a time, with schema validation as a priority
    7. Use conventional commits (feat, fix, docs, style, refactor, perf, test, chore)
    8. After completing the task, update TODO.md

    IMPORTANT: Complete ONE task fully before moving to the next.

    SDUI Library Requirements:
    - Design JSON schemas for all component specifications
    - Create robust specification validation with detailed error messages
    - Implement type guards and type narrowing for all specifications
    - Create efficient component resolution from specification types
    - Return `Result<T, E>` from functions that might fail
    - Build a JSON-based theming and styling system
    - Ensure all code is type-safe with no any/unknown types
    - Add unit tests for all pure utility functions
    - Create Storybook stories with example specifications for components

    Component Organization:
    1. Place each component in its own directory
    2. Include specification schema definition with each component
    3. Group related components in feature-based directories
    4. Use barrel files (index.ts) to export public components
    5. Make all rendered components sexy as fuck and beautiful for 2025
    6. ALWAYS use @shadcn/ui components when available (install via CLI: `npx shadcn@latest add [component-name]`)
    7. Always REGISTER ALL COMPONENTS in the `./components.json` file in project root
    8. Only create custom components when there's no shadcn equivalent
    9. Follow proper component structure with directories, barrel files, and stories

    Focus on building a robust, type-safe SDUI system with schema validation, beautiful rendering, and excellent developer experience.
    Make custom components ðŸ”¥ and sexy as fuck
