{
  "name": "@banja/react-jedi",
  "description": "Rapidly build beautiful, modern websites using structured configurations, React, TailwindCSS, and ShadCN components.",
  "md": {
    "generate": true,
    "sections": [
      { "$ref": "./docs/project-overview.md" },
      { "$ref": "./docs/npm-scripts.md" },
      {
        "$ref": "https://github.com/alexberriman/vibe/blob/main/claude/md/functional-programming.md"
      },
      {
        "$ref": "https://github.com/alexberriman/vibe/blob/main/claude/md/typescript-best-practices.md"
      },
      { "$ref": "./docs/directory-structure.md" },
      {
        "$ref": "https://github.com/alexberriman/vibe/blob/main/claude/md/naming-conventions.md"
      },
      {
        "$ref": "https://github.com/alexberriman/vibe/blob/main/claude/md/function-arguments.md"
      },
      {
        "$ref": "https://github.com/alexberriman/vibe/blob/main/claude/md/error-handling.md"
      },
      {
        "$ref": "https://github.com/alexberriman/vibe/blob/main/claude/md/testing-guidelines.md"
      },
      {
        "$ref": "https://github.com/alexberriman/vibe/blob/main/claude/md/react-component-design.md"
      },
      {
        "$ref": "https://github.com/alexberriman/vibe/blob/main/claude/md/git-workflow.md"
      },
      {
        "$ref": "https://github.com/alexberriman/vibe/blob/main/claude/md/task-approach.md"
      },
      {
        "$ref": "https://github.com/alexberriman/vibe/blob/main/claude/md/dos-donts.md"
      }
    ]
  },

  "husky": {
    "pre-commit": [
      {
        "$ref": "https://github.com/alexberriman/vibe/blob/main/claude/husky/mainline-development.sh"
      },
      {
        "$ref": "https://github.com/alexberriman/vibe/blob/main/claude/husky/check-unstaged-files.sh"
      },
      {
        "$ref": "https://github.com/alexberriman/vibe/blob/main/claude/husky/precommit-claude-commit-message.sh"
      },
      {
        "$ref": "https://github.com/alexberriman/vibe/blob/main/claude/husky/eslint-config-violation.sh"
      },
      {
        "$ref": "https://github.com/alexberriman/vibe/blob/main/claude/husky/eslint-config-violation.sh"
      },
      { "$ref": "https://github.com/alexberriman/vibe/blob/main/claude/husky/husky-changes.sh" },
      {
        "$ref": "https://github.com/alexberriman/vibe/blob/main/claude/husky/typescript-violation.sh"
      },
      { "$ref": "https://github.com/alexberriman/vibe/blob/main/claude/husky/check.sh" }
    ],
    "pre-checkout": [
      {
        "$ref": "https://github.com/alexberriman/vibe/blob/main/claude/husky/pre-checkout-mainline.sh"
      }
    ],
    "prepare-commit-msg": [
      {
        "$ref": "https://github.com/alexberriman/vibe/blob/main/claude/husky/prepare-commit-claude.sh"
      }
    ],
    "post-commit": [
      {
        "$ref": "https://github.com/alexberriman/vibe/blob/main/claude/husky/post-commit-push.sh"
      }
    ],
    "commit-msg": [
      {
        "$ref": "https://github.com/alexberriman/vibe/blob/main/claude/husky/commit-msg-claude.sh"
      }
    ]
  },
  "domains": {
    "whitelist": ["github.com", "raw.githubusercontent.com"]
  },
  "loop": [
    {
      "cmd": "npm run check",
      "description": "Runs typecheck, test and linting",
      "timeout": 240,
      "clear": true,
      "onError": {
        "prompt": { "$ref": "prompts.check" }
      },
      "restartLoopOnError": true,
      "onlyInState": "IDLE"
    },
    {
      "cmd": "npm run lint:example-app",
      "description": "Lint the example app",
      "timeout": 120,
      "clear": true,
      "onError": {
        "prompt": { "$ref": "prompts.lint-example-fix" }
      },
      "restartLoopOnError": true,
      "onlyInState": "IDLE"
    },
    {
      "cmd": "npm run build:example",
      "description": "Build our example app",
      "timeout": 120,
      "clear": true,
      "onError": {
        "prompt": { "$ref": "prompts.build-example-fix" }
      },
      "restartLoopOnError": true,
      "onlyInState": "IDLE"
    },
    {
      "cmd": "npm run test-storybook",
      "description": "Test storybook components",
      "timeout": 180,
      "clear": true,
      "onError": {
        "prompt": { "$ref": "prompts.storybook-components-fix" }
      },
      "restartLoopOnError": true,
      "onlyInState": "IDLE"
    },
    {
      "cmd": "npm run build",
      "description": "Build the project",
      "timeout": 120,
      "clear": true,
      "onError": {
        "prompt": { "$ref": "prompts.build-fix" }
      },
      "restartLoopOnError": true,
      "onlyInState": "IDLE"
    },
    {
      "clear": true,
      "cmd": { "$internal": "check-unstaged-git-files" },
      "description": "If we have local changes that aren't committed, figure out what they are and commit them",
      "ifUnstagedFiles": {
        "clear": true,
        "cmd": "send-prompt",
        "prompt": { "$ref": "prompts.git-local-changes" }
      }
    },
    {
      "clear": true,
      "cmd": { "$internal": "check-if-git-ahead-remote" },
      "description": "Check if local git status is ahead of remote and",
      "ifAhead": {
        "cmd": {
          "$internal": "git-push",
          "description": "push local branch to remote (git push)"
        }
      }
    },
    {
      "cmd": { "$internal": "task-execution" },
      "description": "Smart component library task management",
      "onHasTasks": {
        "clear": true,
        "cmd": "send-prompt",
        "prompt": { "$ref": "prompts.next-component-task" }
      },
      "onAllTasksCompleted": {
        "cmd": { "$internal": "kill-process" },
        "description": "Terminate automation - all tasks completed"
      }
    }
  ],
  "text": {},
  "prompts": {
    "lint-fix": {
      "$ref": "https://github.com/alexberriman/vibe/blob/main/claude/prompts/lint-fix.prompt"
    },
    "typecheck-fix": {
      "$ref": "https://github.com/alexberriman/vibe/blob/main/claude/prompts/typecheck-fix.prompt"
    },
    "test-fix": {
      "$ref": "https://github.com/alexberriman/vibe/blob/main/claude/prompts/test-fix.prompt"
    },
    "build-fix": {
      "$ref": "https://github.com/alexberriman/vibe/blob/main/claude/prompts/build-fix.prompt"
    },
    "next-component-task": {
      "$ref": "https://github.com/alexberriman/vibe/blob/main/claude/prompts/next-component-task.prompt"
    },
    "library-complete": {
      "$ref": "https://github.com/alexberriman/vibe/blob/main/claude/prompts/complete.prompt"
    },
    "git-local-changes": {
      "$ref": "https://github.com/alexberriman/vibe/blob/main/claude/prompts/git-local-changes.prompt"
    },
    "storybook-components-fix": "You are an autonomous programming agent responsible for identifying and resolving all Storybook component testing failures.\n\nStart by running:\n\n`npm run test-storybook`\n\nThis will execute all component tests defined in `.test.tsx` or similar test files associated with Storybook stories.\n\nNote: The full test suite can take a while to run. To speed up testing when making changes to individual components or stories, use the optional `--includeTags` flag:\n\n`npm run test-storybook -- --includeTags=your-tag`\n\nTo find available tags:\n- Open the relevant `.stories.tsx` file\n- Look for `parameters: { tags: [...] }` inside the default export\n- If no tags exist, you can add them (e.g., `tags: ['ui-accordion']`) to enable filtered runs\n\nFor each failing test:\n- Analyze the error message and stack trace to determine the root cause\n- Open the corresponding component and test file\n- Fix the test or component implementation to resolve the failure\n  - Ensure correct usage of testing-library APIs\n  - Resolve any incorrect selectors, props, or assumptions\n  - Update mocks, fixtures, or imports if needed\n\nEnhancement:\n- If the failure is due to incomplete coverage or missing assertions, add more comprehensive test cases\n- Ensure all interactive behaviors (clicks, state changes, etc.) are covered\n- Validate accessibility using assertions like `getByRole`, `getByLabelText`, etc.\n\nConsistency:\n- Maintain existing testing style and structure\n- Prefer `screen` and `userEvent` from `@testing-library/react` for interactions\n- Keep tests deterministic and isolated\n\nAfter fixes are applied, re-run:\n\n`npm run test-storybook` or with tags as needed:\n\n`npm run test-storybook -- --includeTags=your-tag`\n\nEnsure the test suite passes without errors or warnings.\n\nFinally, output a summary of:\n- Components tested\n- Files modified\n- Issues fixed or improved\n- New test coverage added (if any)\n\nDo not include stack traces, raw errors, or unrelated output.",
    "check": "You are an autonomous programming agent responsible for ensuring the codebase passes all linting, type checking, and tests.\n\nStart by running:\n\n`npm run check`\n\nThis runs three critical validations:\n- ESLint (code style and potential bugs)\n- TypeScript type checking (compile-time safety)\n- Unit and component tests (correctness)\n\nFor each failure or error:\n1. Identify the root cause from the output.\n2. Open the relevant file and fix the issue.\n   - For lint issues: Follow existing lint rules, auto-fix when safe.\n   - For type errors: Fix incorrect types, missing imports, invalid props, etc.\n   - For test failures: Update broken tests, mocks, or component logic as needed.\n\nGuidelines:\n- Maintain existing code style and structure.\n- Do not suppress lint or type errors unless clearly intentional.\n- Keep tests deterministic and isolated.\n- Use safe and minimal changes that preserve original intent.\n\nOnce fixes are applied, re-run:\n\n`npm run check`\n\nRepeat until there are no errors.\n\nFinally, output a summary of:\n- Files modified\n- Type errors fixed\n- Lint issues resolved\n- Tests fixed or updated\n\nDo not include raw stack traces or unrelated logs.",
    "build-example-fix": "You are an autonomous programming agent responsible for resolving build failures in the example app located in `/examples`. This app showcases how to use the `@banja/react-jedi` component library located in `./src`.\n\nStart by running:\n\n`npm run build:example`\n\nYour goal is to fix all build errors to ensure the example app compiles successfully. Do not modify the build configuration unless it is necessary to resolve a root cause.\n\nFocus on:\n- Fixing import/export issues in the example app or library components\n- Resolving module resolution problems between `examples/` and `src/`\n- Ensuring all internal and external dependencies are correctly installed and referenced\n- Addressing any TypeScript or bundler configuration issues\n- Fixing asset path issues if they affect build output\n\nAfter each fix, re-run:\n\n`npm run build:example`\n\nContinue until the build completes successfully.\n\nWhen complete, output a concise summary of the fixes made and why they were required. Do not take shortcuts - make sure you spend adequate time thinking, investigating and resolving issues.",
    "lint-example-fix": "You are an autonomous programming agent responsible for fixing all linting errors in the example app.\n\nStart by running:\n\n`npm run lint:example-app`\n\nThis will run ESLint on the example app codebase located in the `/examples` directory.\n\nFor each linting error:\n1. Carefully analyze the error message to understand what needs to be fixed\n2. Open the relevant file in the `/examples` directory\n3. Fix the issue properly - do not take shortcuts, do not disable rules, do not write scripts to bulk fix\n4. Make thoughtful, manual fixes that maintain code quality and follow best practices\n5. Ensure fixes align with the project's coding standards and existing patterns\n\nDo NOT:\n- Use suppression comments\n- Modify ESLint configuration to suppress errors\n- Write automated scripts for bulk fixes\n- Take any shortcuts that compromise code quality\n\nInstead, DO:\n- Fix each issue manually and properly\n- Understand why the rule exists and fix the root cause\n- Maintain consistency with the rest of the codebase\n- Ensure all fixes improve code quality\n\nAfter fixing issues, re-run:\n\n`npm run lint:example-app`\n\nRepeat until there are no errors.\n\nOnce all linting errors are fixed, commit and push all changes with a clear commit message describing what was fixed.\n\nOutput a summary of:\n- Files modified\n- Types of linting issues fixed\n- Any patterns noticed that could be improved project-wide"
  }
}
